diff --git a/part1/pets_db.py b/part1/pets_db.py
index 03355e1..4d8706c 100644
--- a/part1/pets_db.py
+++ b/part1/pets_db.py
@@ -17,6 +17,8 @@ TABLE_SCHEMA = """
       owner_id integer not null,
       pet_id integer not null
     );
+    
+
 """
 
 ANIMALS = [
diff --git a/part1/question1.py b/part1/question1.py
index 5c99fdb..3f74c24 100644
--- a/part1/question1.py
+++ b/part1/question1.py
@@ -20,6 +20,8 @@ def get_city_temperature(city):
       return 17
    if city == "San Francisco":
       return 16
+   if city == "New York":
+      return 14
 
 def get_city_weather(city):
 
@@ -29,6 +31,8 @@ def get_city_weather(city):
      sky_condition = "cloudy"
   elif city == "New York":
      sky_condition = "rainy"
+  elif city == "Quito":
+      sky_condition = "sunny"
 
   temperature = get_city_temperature(city)
 
diff --git a/part1/question2.py b/part1/question2.py
index 34a9b01..79b6b52 100644
--- a/part1/question2.py
+++ b/part1/question2.py
@@ -18,4 +18,10 @@
 swapper = None
 
 def run_swapper(list_of_tuples):
-  return list(map(swapper, list_of_tuples))
\ No newline at end of file
+  return list(map(swapper, list_of_tuples))
+
+def swapper(tuple):
+  a,b = tuple
+  return (b,a)
+
+
diff --git a/part1/question3.py b/part1/question3.py
index 04fab99..a5b7501 100644
--- a/part1/question3.py
+++ b/part1/question3.py
@@ -26,8 +26,38 @@
 # formulas and their outputs in the test file, `question3_test.py`.
 
 # This function should return an oven instance!
+
+class Oven:
+  def __init__(self):
+    self.ingredients=[]
+    self.temperature=0
+
+  def add(self,item):
+    self.ingredients.append(item)
+
+  def freeze(self,temperature):
+    self.temperature=-1
+
+  def boil(self,temperature):
+    self.temperature = temperature
+
+  def wait(self):
+    pass
+
+  def get_output(self):
+    if self.temperature <0:
+      return "snow"
+    elif self.temperature >150:
+      return "gold"
+    elif self.temperature>0 and self.temperature<=150:
+      return "pizza"
+    else:
+      return "combining the ingredients with no change in temperature" 
+
+
 def make_oven():
-  None
+  return Oven()
+
 
 def alchemy_combine(oven, ingredients, temperature):
   
@@ -35,9 +65,9 @@ def alchemy_combine(oven, ingredients, temperature):
     oven.add(item)
 
   if temperature < 0:
-    oven.freeze()
-  elif temperature >= 100:
-    oven.boil()
+    oven.freeze(temperature)
+  elif temperature >= 150:
+    oven.boil(temperature)
   else:
     oven.wait()
 
diff --git a/part1/question3_test.py b/part1/question3_test.py
index 6cb6c89..8880c8c 100644
--- a/part1/question3_test.py
+++ b/part1/question3_test.py
@@ -1,3 +1,5 @@
+from question3 import (make_oven,alchemy_combine)
+
 def test_alchemy_combine():
 
   assert alchemy_combine(
diff --git a/part1/question4.py b/part1/question4.py
index 1e1b2bf..6e62a1d 100644
--- a/part1/question4.py
+++ b/part1/question4.py
@@ -24,8 +24,8 @@ import pets_db
 
 sql_pets_owned_by_nobody = """
 
-Your SQL here.
-
+SELECT a.name, a.species, a.age FROM animals AS a
+LEFT JOIN people_animals AS pe_an ON a.animal_id = pe_an.pet_id WHERE pe_an.owner_id IS NULL;
 """
 
 # Part 4.B:
@@ -34,7 +34,9 @@ Your SQL here.
 
 sql_pets_older_than_owner = """
 
-Your SQL here.
+SELECT COUNT(*) AS numero_mascotas_mayores FROM animals AS a
+JOIN people_animals AS pa ON a.animal_id = pa.pet_id
+JOIN people AS p ON pa.owner_id = p.person_id WHERE a.age > p.age;
 
 """
 
@@ -43,6 +45,10 @@ Your SQL here.
 # The output should be a list of tuples in the format: (<person name>, <pet name>, <species>)
 sql_only_owned_by_bessie = """ 
 
-Your SQL here.
+SELECT p.name AS nombre_persona, a.name AS nombre_mascota, a.species As especie FROM people AS p
+JOIN people_animals AS pa ON p.person_id = pa.owner_id
+JOIN animals As a ON pa.pet_id = a.animal_id WHERE p.name='bessie'
+GROUP BY p.name,a.name, a.species
+HAVING COUNT(*) = 1;
 
 """
\ No newline at end of file
diff --git a/part1/question4_test.py b/part1/question4_test.py
index b01006c..ecb7b66 100644
--- a/part1/question4_test.py
+++ b/part1/question4_test.py
@@ -11,6 +11,12 @@ def test_question4_pets_older_than_owner():
   assert len(result) == 1
   assert result[0] == 2
 
+  print("Resultado de la consulta pets_older_than_owner:")
+  print(result[0])
+
+
+
+
 def test_question4_pets_owned_by_nobody():
   pets_db.create_db()
 
@@ -24,6 +30,11 @@ def test_question4_pets_owned_by_nobody():
   assert rows[0] == ('petey', 'gray whale', 38)
   assert rows[1] == ('shannon', 'cow', 14)
 
+  print("Resultados de la consulta pets_owned_by_nobody:")
+  for result in rows:
+    print(result)
+
+
 def test_question4_only_owned_by_bessie():
   pets_db.create_db()
 
@@ -33,6 +44,11 @@ def test_question4_only_owned_by_bessie():
 
   rows.sort()
 
-  assert len(rows) == 2
+  assert len(rows) == 3
   assert rows[0] == ('bessie', 'leyla', 'gray whale')
-  assert rows[1] == ('bessie', 'randolph', 'lemur')
\ No newline at end of file
+  assert rows[1] == ('bessie', 'randolph', 'lemur')
+  assert rows[2] == ('bessie', 'ricky', 'lobster')
+
+  print("Resultados de la consulta only_owned_by_bessie:")
+  for result in rows:
+    print(result)
\ No newline at end of file
diff --git a/part1/question5.py b/part1/question5.py
index f76654f..e2eae1a 100644
--- a/part1/question5.py
+++ b/part1/question5.py
@@ -20,7 +20,11 @@
 
 sql_create_favorite_foods = """
 
-Your SQL here.
+CREATE TABLE favorite_foods(
+      food_id integer not null,
+      name text not null,
+      vegetarian integer not null
+    );
 
 """
 
@@ -30,8 +34,11 @@ Your SQL here.
 
 sql_alter_tables_with_favorite_food = """
 
-Your SQL here.
+ALTER TABLE animals
+ADD favorite_food_id integer;
 
+ALTER TABLE people
+ADD favorite_food_id integer;
 """
 
 # Part 5.C:
@@ -40,6 +47,7 @@ Your SQL here.
 
 sql_select_all_vegetarian_pets = """
 
-Your SQL here.
+SELECT a.name AS nombre_mascota, ff.name AS nombre_comida FROM animals as a
+JOIN favorite_foods AS ff ON a.favorite_food_id = ff.food_id WHERE ff.vegetarian = 1;
 
 """
\ No newline at end of file
diff --git a/part1/question5_test.py b/part1/question5_test.py
index b5d932e..913728f 100644
--- a/part1/question5_test.py
+++ b/part1/question5_test.py
@@ -72,3 +72,7 @@ def test_select_all_vegetarian_pets():
   assert rows[1] == ('martin', 'spinach')
   assert rows[2] == ('ricky', 'cough drops')
   assert rows[3] == ('shannon', 'turnips')
+
+  print("Resultados de la consulta select_all_vegetarian_pets:")
+  for row in rows:
+    print(f"({row[0]}, {row[1]})")
\ No newline at end of file
